{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/lessons/grammar/[id]",
      "regex": "^/lessons/grammar/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/lessons/grammar/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/lessons/syllables/[id]",
      "regex": "^/lessons/syllables/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/lessons/syllables/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/lessons/texts/[id]",
      "regex": "^/lessons/texts/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/lessons/texts/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/alphabet",
      "regex": "^/alphabet(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/alphabet(?:/)?$"
    },
    {
      "page": "/challenges",
      "regex": "^/challenges(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/challenges(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/exercises",
      "regex": "^/exercises(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exercises(?:/)?$"
    },
    {
      "page": "/exercises/listening",
      "regex": "^/exercises/listening(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exercises/listening(?:/)?$"
    },
    {
      "page": "/exercises/pronunciation",
      "regex": "^/exercises/pronunciation(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exercises/pronunciation(?:/)?$"
    },
    {
      "page": "/exercises/reading",
      "regex": "^/exercises/reading(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exercises/reading(?:/)?$"
    },
    {
      "page": "/exercises/speaking",
      "regex": "^/exercises/speaking(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exercises/speaking(?:/)?$"
    },
    {
      "page": "/exercises/writing",
      "regex": "^/exercises/writing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/exercises/writing(?:/)?$"
    },
    {
      "page": "/forgot-password",
      "regex": "^/forgot\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/forgot\\-password(?:/)?$"
    },
    {
      "page": "/games",
      "regex": "^/games(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games(?:/)?$"
    },
    {
      "page": "/games/achievements",
      "regex": "^/games/achievements(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/achievements(?:/)?$"
    },
    {
      "page": "/games/hangman",
      "regex": "^/games/hangman(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/hangman(?:/)?$"
    },
    {
      "page": "/games/memory",
      "regex": "^/games/memory(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/memory(?:/)?$"
    },
    {
      "page": "/games/memory-match",
      "regex": "^/games/memory\\-match(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/memory\\-match(?:/)?$"
    },
    {
      "page": "/games/quiz",
      "regex": "^/games/quiz(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/quiz(?:/)?$"
    },
    {
      "page": "/games/time-challenge",
      "regex": "^/games/time\\-challenge(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/time\\-challenge(?:/)?$"
    },
    {
      "page": "/games/word-match",
      "regex": "^/games/word\\-match(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/games/word\\-match(?:/)?$"
    },
    {
      "page": "/help",
      "regex": "^/help(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/help(?:/)?$"
    },
    {
      "page": "/lessons",
      "regex": "^/lessons(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons(?:/)?$"
    },
    {
      "page": "/lessons/1",
      "regex": "^/lessons/1(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/1(?:/)?$"
    },
    {
      "page": "/lessons/2",
      "regex": "^/lessons/2(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/2(?:/)?$"
    },
    {
      "page": "/lessons/3",
      "regex": "^/lessons/3(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/3(?:/)?$"
    },
    {
      "page": "/lessons/4",
      "regex": "^/lessons/4(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/4(?:/)?$"
    },
    {
      "page": "/lessons/5",
      "regex": "^/lessons/5(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/5(?:/)?$"
    },
    {
      "page": "/lessons/6",
      "regex": "^/lessons/6(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/6(?:/)?$"
    },
    {
      "page": "/lessons/syllables",
      "regex": "^/lessons/syllables(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/lessons/syllables(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/manifest.webmanifest",
      "regex": "^/manifest\\.webmanifest(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/manifest\\.webmanifest(?:/)?$"
    },
    {
      "page": "/phrases",
      "regex": "^/phrases(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/phrases(?:/)?$"
    },
    {
      "page": "/phrases/greetings",
      "regex": "^/phrases/greetings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/phrases/greetings(?:/)?$"
    },
    {
      "page": "/profile",
      "regex": "^/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile(?:/)?$"
    },
    {
      "page": "/reset-password",
      "regex": "^/reset\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/reset\\-password(?:/)?$"
    },
    {
      "page": "/settings",
      "regex": "^/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/settings(?:/)?$"
    },
    {
      "page": "/signup",
      "regex": "^/signup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/signup(?:/)?$"
    },
    {
      "page": "/syllables",
      "regex": "^/syllables(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/syllables(?:/)?$"
    },
    {
      "page": "/vocabulary",
      "regex": "^/vocabulary(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/vocabulary(?:/)?$"
    },
    {
      "page": "/vocabulary/colors",
      "regex": "^/vocabulary/colors(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/vocabulary/colors(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}